from pydub import AudioSegment
import matplotlib.pyplot as plt
from tempfile import mktemp
import scipy
import scipy.io.wavfile as wav
import numpy as np
import numpy.fft as fft
from scipy.signal import filtfilt

############ Temporary Conversion of .mp3 to .wav
mp3_audio = AudioSegment.from_file(path ='C:/Users/Jennifer/Downloads/', file = "Charlie.mp3") 
wname = mktemp('.wav')  # use temporary file
mp3_audio.export(wname, format="wav")  # convert to wav

################# Plotting Amplitude vs. time
fs,x = wav.read(wname) #fs = sampling frequency
length = x.shape[0] / fs
time = np.linspace(0., length, x.shape[0])
plt.plot(time, x[:, 0], label="Left channel")
plt.plot(time, x[:, 1], label="Right channel")
#plt.legend()
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.show()

############### Unfiltered pitch freq plot
channel = x[:,0] #Reading info from just the first channel (mono)
X = fft.fft(channel)
N=X.shape[0]
N = int(N)
freqbin=np.linspace(0,fs,N);
amp=np.abs(X)
plt.subplot(3,1,2)
plt.xlim([0, 4000])
plt.xlabel('Frequency (Hz)')
plt.ylabel('abs(F(v))')
plt.plot(freqbin, amp/30000)

print('unfiltered pitch value =', round(freqbin[np.argmax(amp)],2), 'Hz')

############### Signl With Lowpass filter ########################
def Filter(signal):
    #fs = 44100
    lowcut = 70.0
    highcut = 300.0
    
    nyq = 0.5*fs
    low = lowcut/nyq
    high = highcut/nyq
    
    order = 4
    
    b, a = scipy.signal.butter(order, [low,high], 'bandpass', analog=False)
    yy = scipy.signal.filtfilt(b,a, signal, axis = 0)
    
    return(yy)

def Filter2(signal):
    #fs = 44100
    lowcut = 70.0
    highcut = 300.0
    
    nyq = 0.5*fs
    low = lowcut/nyq
    high = highcut/nyq
    
    order = 2
    
    b, a = scipy.signal.butter(order, [low,high], 'bandpass', analog=False)
    yy = scipy.signal.filtfilt(b,a, signal, axis = 0)
    
    return(yy)

plt.subplot(3,1,3)
fx = Filter(channel) #THIS CALLS ON THE FUNCTION TO FILTER THE RECORDING

X2 = fft.fft(fx) #converting to freq domain, a complex value
N2 = X2.size #taking the length of the sample
freqbin2=np.linspace(0,fs,N2);
amp2=np.abs(X2)/fs #taking only the magnitude portion of the complex value

plt.xlim([0, 4000])
plt.xlabel('Frequency (Hz)')
plt.ylabel('abs(F(v))')    
plt.plot(freqbin2, amp2/30000)

pitch = freqbin2[np.argmax(amp2)]

if pitch > 300:
    fx = Filter2(channel)
    X2 = fft.fft(fx)
    amp2 = np.abs(X2)/fs
    pitch = freqbin2[np.argmax(amp2)]
    
print('filtered pitch value =', round(pitch,2), 'Hz')

plt.tight_layout()

###################################### To Check more info if needed
#sound = AudioSegment.from_mp3('Charlie.mp3')
#
## get raw audio data as a bytestring
#raw_data = sound.raw_data
## get the frame rate
#sample_rate = sound.frame_rate
## get amount of bytes contained in one sample
#sample_size = sound.sample_width
## get channels
#channels = sound.channels
#####################################
